<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:core="http://www.mulesoft.org/schema/mule/core" 
xmlns:http="http://www.mulesoft.org/schema/mule/http" 
xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
xmlns:json="http://www.mulesoft.org/schema/mule/json"
xmlns:spring="http://www.springframework.org/schema/beans" 
 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
    <data-mapper:config name="Account_To_Account" transformationGraphPath="account_to_account.grf" doc:name="Account_To_Account"/>

 <batch:job name="migrateAccountsBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <sfdc:query config-ref="Salesforce" query="dsql:SELECT AccountNumber, AccountSource, AnnualRevenue, BillingCity, BillingCountry, BillingPostalCode, BillingState, BillingStreet, Description, Fax, Industry, LastModifiedDate, Name, NumberOfEmployees, OwnerId, Ownership, ParentId, Phone, Rating, ShippingCity, ShippingCountry, ShippingPostalCode, ShippingState, ShippingStreet, Sic, SicDesc, Site, TickerSymbol, Type, Website FROM Account WHERE NumberOfEmployees &gt; 5000 AND (Industry = 'Education' OR Industry = 'Government')" fetchSize="${page.size}" doc:name="Accounts from Salesforce instance"/>
        </batch:input> 
        <batch:process-records>
            <batch:step name="getAccountInDatabaseStep">
                <enricher source="#[payload.isEmpty() ? NullPayload.getInstance() : payload[0]]" target="#[recordVars['accountInDatabase']]" doc:name="store result in record var 'accountInDatabase'">
                    <db:select config-ref="Database" doc:name="query Account from Database">
                        <db:parameterized-query><![CDATA[SELECT Id, Name, LastModifiedDate FROM Account WHERE Name = #[payload['Name']]]]></db:parameterized-query>

                    </db:select>
                </enricher>
            </batch:step>
            <batch:step name="selectNewerAccountStep" accept-expression="!(recordVars['accountInDatabase'] is NullPayload)">
                <choice doc:name="Choice">
                    <when expression="#[org.mule.templates.date.DateUtils.ISOStringDateToDateTime(payload['LastModifiedDate']).isAfter(org.mule.templates.date.DateUtils.dateToDateTime(recordVars['accountInDatabase']['LastModifiedDate']))]">
                        <expression-component doc:name="define Id in SalesForce"><![CDATA[payload['Id'] = recordVars['accountInDatabase']['Id']]]></expression-component>
                    </when>
                    <otherwise>
                        <set-payload doc:name="set to null to skip this account" value="#[return null]"/>
                    </otherwise>
                </choice>
            </batch:step>
            <batch:step name="cleanupAccounts" accept-expression="!(payload is NullPayload)">
                <data-mapper:transform config-ref="Account_To_Account" doc:name="Salesforce Account To Database Account"/>

                <expression-component doc:name="modify payload"><![CDATA[// remove field LastModifiedDate
payload.remove('LastModifiedDate');


// changing type of field NumberOfEmployees to int
if (payload.get('NumberOfEmployees') == null) {
	payload.remove('NumberOfEmployees') 
} else {
	int intNumberOfEmployees = Integer.parseInt(payload.get('NumberOfEmployees'));
	payload.put('NumberOfEmployees', intNumberOfEmployees);
}]]></expression-component>
            </batch:step>
            <batch:step name="updateAccountsInDatabaseStep" accept-expression="!(payload is NullPayload) &amp;&amp; !(recordVars['accountInDatabase'] is NullPayload)">
                <batch:commit size="200" doc:name="Batch Commit">
                    <db:update config-ref="Database" bulkMode="true" doc:name="update accunts in Database">
                        <db:parameterized-query><![CDATA[UPDATE Account SET
	AccountNumber = #[payload['AccountNumber']],
	AccountSource = #[payload['AccountSource']],
	AnnualRevenue = #[payload['AnnualRevenue']],
	BillingCity = #[payload['BillingCity']],
	BillingCountry = #[payload['BillingCountry']],
	BillingPostalCode = #[payload['BillingPostalCode']],
	BillingState = #[payload['BillingState']],
	BillingStreet = #[payload['BillingStreet']],
	Description = #[payload['Description']],
	Fax = #[payload['Fax']],
	Industry = #[payload['Industry']],
	LastModifiedDate = CURRENT_TIMESTAMP,
	NumberOfEmployees = #[payload['NumberOfEmployees']],
	Ownership = #[payload['Ownership']],
	Phone = #[payload['Phone']],
	Rating = #[payload['Rating']],
	ShippingCity = #[payload['ShippingCity']],
	ShippingCountry = #[payload['ShippingCountry']],
	ShippingPostalCode = #[payload['ShippingPostalCode']],
	ShippingState = #[payload['ShippingState']],
	ShippingStreet = #[payload['ShippingStreet']],
	Sic = #[payload['Sic']],
	SicDesc = #[payload['SicDesc']],
	Site = #[payload['Site']],
	TickerSymbol = #[payload['TickerSymbol']],
	Type = #[payload['Type']],
	Website = #[payload['Website']]
WHERE Name = #[payload['Name']]]]></db:parameterized-query>

                    </db:update>
                </batch:commit>
            </batch:step>
            <batch:step name="insertAccountsToDatabaseStep" accept-expression="!(payload is NullPayload) &amp;&amp; recordVars['accountInDatabase'] is NullPayload">
                <batch:commit size="200" doc:name="Batch Commit">
                    <db:insert config-ref="Database" bulkMode="true" doc:name="insert accounts to Database">
                        <db:parameterized-query><![CDATA[INSERT INTO Account (
	Id,
	AccountNumber,
	AccountSource,
	AnnualRevenue,
	BillingCity,
	BillingCountry,
	BillingPostalCode,
	BillingState,
	BillingStreet,
	Description,
	Fax,
	Industry,
	LastModifiedDate,
	Name,
	NumberOfEmployees,
	Ownership,
	Phone,
	Rating,
	ShippingCity,
	ShippingCountry,
	ShippingPostalCode,
	ShippingState,
	ShippingStreet,
	Sic,
	SicDesc,
	Site,
	TickerSymbol,
	Type,
	Website
) VALUES (
	UUID(),
	#[payload['AccountNumber']],
	#[payload['AccountSource']],
	#[payload['AnnualRevenue']],
	#[payload['BillingCity']],
	#[payload['BillingCountry']],
	#[payload['BillingPostalCode']],
	#[payload['BillingState']],
	#[payload['BillingStreet']],
	#[payload['Description']],
	#[payload['Fax']],
	#[payload['Industry']],
	CURRENT_TIMESTAMP,
	#[payload['Name']],
	#[payload['NumberOfEmployees']],
	#[payload['Ownership']],
	#[payload['Phone']],
	#[payload['Rating']],
	#[payload['ShippingCity']],
	#[payload['ShippingCountry']],
	#[payload['ShippingPostalCode']],
	#[payload['ShippingState']],
	#[payload['ShippingStreet']],
	#[payload['Sic']],
	#[payload['SicDesc']],
	#[payload['Site']],
	#[payload['TickerSymbol']],
	#[payload['Type']],
	#[payload['Website']]
)]]></db:parameterized-query>

                    </db:insert>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                	<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
					<smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" connector-ref="gmailConnector" doc:name="send mail"/>
				</processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>
   
    <flow name="mainFlow"  processingStrategy="synchronous" doc:description="This flow is the entry point to the Template business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.

">
        <batch:execute name="migrateAccountsBatch" doc:name="trigger migrateAccountsBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
</mule>
